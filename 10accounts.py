import streamlit as st
import requests
import pandas as pd

class ModelAPI:
    def __init__(self, host: str, port: int):
        self.base_url = f"{host}:{port}/api/v1/models"
    
    def fit_model(self, params: dict):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏."""
        response = requests.post(f"{self.base_url}/fit", json=params)
        return response.json()
    
    def get_fit_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –æ–±—É—á–µ–Ω–∏—è."""
        response = requests.get(f"{self.base_url}/fit/status")
        return response.json()
    
    def get_model_list(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
        response = requests.get(f"{self.base_url}/list")
        return response.json()

    def activate_model(self, model_id: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞."""
        response = requests.put(f"{self.base_url}/activate", json={"model_id": model_id})
        return response.json()

    def predict(self, data: dict):
        """–ü—Ä–æ–≥–Ω–æ–∑ –∏—Å—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é."""
        response = requests.post(f"{self.base_url}/predict", json=data)
        return response.json()

    def predict_csv(self, csv_data):
        """–ü—Ä–æ–≥–Ω–æ–∑ –∏—Å—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ CSV-—Ñ–∞–π–ª–∞."""
        response = requests.post(f"{self.base_url}/predict_csv", files={"file": csv_data})
        return response.json()

    def get_account_ids(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö account_ids –∏–∑ API."""
        response = requests.get(f"{self.base_url}/data/account_ids")
        if response.status_code == 200:
            return response.json()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ account_ids
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Account IDs –∏–∑ API.")
            return []

    def get_model_info(self, model_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏."""
        response = requests.get(f"{self.base_url}/model_info", params={"model_id": model_id})
        return response.json()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
host = "http://****"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Ö–æ—Å—Ç
port = 8000          # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–∞–±–æ—á–∏–π –ø–æ—Ä—Ç
api_client = ModelAPI(host, port)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–ú–æ–¥–µ–ª—å –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'page' not in st.session_state:
    st.session_state.page = "üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
st.sidebar.header("–ú–µ–Ω—é –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
if st.sidebar.button("üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"):
    st.session_state.page = "üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"
if st.sidebar.button("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"):
    st.session_state.page = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"
if st.sidebar.button("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"):
    st.session_state.page = "üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–µ–π
if 'uploaded_data' not in st.session_state:
    st.session_state.uploaded_data = None

if 'model_id' not in st.session_state:
    st.session_state.model_id = None

if 'models' not in st.session_state:
    st.session_state.models = []  # –°–ø–∏—Å–æ–∫ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
def get_ridge_params(params):
    """–°–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è Ridge Classifier."""
    params["alpha"] = st.number_input("Alpha", value=1.0, min_value=0.0)
    params["fit_intercept"] = st.checkbox("Fit Intercept", value=True)

def get_catboost_params(params):
    """–°–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è CatBoost Classifier."""
    params["learning_rate"] = st.number_input("Learning Rate", value=0.1, min_value=0.01, max_value=1.0)
    params["depth"] = st.slider("Depth", min_value=1, max_value=16, value=6)
    params["iterations"] = st.number_input("Iterations", value=100, min_value=1)
    params["l2_leaf_reg"] = st.number_input("L2 Leaf Regularization", value=3, min_value=1, max_value=10)

if st.session_state.page == "üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏":
    st.header("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    
    type_of_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", ["‚öñÔ∏è Ridge Classifier", "üß† CatBoost Classifier"])
    params = {"type_of_model": type_of_model}

    st.subheader("–ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    if type_of_model == "‚öñÔ∏è Ridge Classifier":
        get_ridge_params(params)
    elif type_of_model == "üß† CatBoost Classifier":
        get_catboost_params(params)

    if st.button("üöÄ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
        response = api_client.fit_model(params)
        st.success("–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞—á–∞—Ç!")

elif st.session_state.page == "üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è":
    st.header("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")

    # –ó–∞–≥—Ä—É–∑–∫–∞ account IDs
    account_ids = api_client.get_account_ids()
    if not account_ids:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å account IDs.")
        st.stop()
    
    selected_account_ids = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ Account IDs –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", account_ids["account_ids"])
    if st.button("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"):
        predictions = []
        for account_id in selected_account_ids:
            data = {"account_id": account_id}  # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            prediction_response = api_client.predict(data)
            predictions.append(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è Account ID {account_id}: {prediction_response}")

        for prediction in predictions:
            st.write(prediction)

    # –û–ø—Ü–∏—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    uploaded_test_file = st.file_uploader("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç (CSV)", type=["csv"])
    if uploaded_test_file is not None and st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"):
        prediction_csv_response = api_client.predict_csv(uploaded_test_file)
        st.write("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑ CSV —Ñ–∞–π–ª–∞:")
        st.json(prediction_csv_response)

elif st.session_state.page == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏":
    st.header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")

    if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"):
        model_list = api_client.get_model_list()
        st.session_state.models = model_list.get("models", [])
        st.write("–û–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        st.write(st.session_state.models)

    model_id_input = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ ID –º–æ–¥–µ–ª–∏", [model['id'] for model in st.session_state.models])
    if st.button("üìñ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"):
        model_info = api_client.get_model_info(model_id_input)
        if model_info:
            st.write("üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
            st.json(model_info)
        else:
            st.error("‚ùå –≠—Ç–∞ –º–æ–¥–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        
    if st.button("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å"):
        activate_response = api_client.activate_model(model_id_input)
        if activate_response.get("status") == "success":
            st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å.")
