import streamlit as st
import requests
import time
import pandas as pd
import numpy as np
from sklearn.model_selection import KFold
from sklearn.metrics import accuracy_score
from catboost import CatBoostClassifier
from sklearn.linear_model import RidgeClassifier
from sklearn.preprocessing import LabelEncoder

class ModelAPI:
    def __init__(self, host: str, port: int):
        self.base_url = f"{host}:{port}/api/v1/models"

    def fit_model(self, params: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏."""
        response = requests.post(f"{self.base_url}/fit", json=params)
        return response.json()

    def get_model_info(self, model_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏."""
        response = requests.get(f"{self.base_url}/info/{model_id}")
        return response.json()

host = "http://****"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Ö–æ—Å—Ç
port = 8000          # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–∞–±–æ—á–∏–π –ø–æ—Ä—Ç
api_client = ModelAPI(host, port)

st.title("–ú–æ–¥–µ–ª—å –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö")

if 'page' not in st.session_state:
    st.session_state.page = "üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"

col1, col2, col3 = st.sidebar.columns(3)
with col1:
    if st.button("üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"):
        st.session_state.page = "üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"
with col2:
    if st.button("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"):
        st.session_state.page = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"
with col3:
    if st.button("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"):
        st.session_state.page = "üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–µ–π
if 'uploaded_data' not in st.session_state:
    st.session_state.uploaded_data = None

if 'model' not in st.session_state:
    st.session_state.model = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è
if 'model_id' not in st.session_state:
    st.session_state.model_id = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –º–æ–¥–µ–ª–∏
if 'models' not in st.session_state:
    st.session_state.models = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏ –µ—ë ID –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è

if st.session_state.page == "üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏":
    st.header("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
@@ -138,7 +135,7 @@
            st.write(f"üìâ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏: {std_accuracy:.4f}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –∏ model_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
            st.session_state['model'] = model
            st.session_state.models[params["model_id"]] = model  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –ø–æ–¥ –µ—ë ID
            st.session_state['model_id'] = params["model_id"]

            if type_of_model == "üß† CatBoost Classifier":
@@ -160,6 +157,9 @@
            account_ids = data['account_id'].unique()
            account_id_input = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ Account ID –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", account_ids)

            # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            model_id_input = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ ID –º–æ–¥–µ–ª–∏", list(st.session_state.models.keys()))
            if st.button("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
                account_data = data[data['account_id'] == account_id_input]

@@ -175,40 +175,40 @@
                        X_predict[col] = le.fit_transform(X_predict[col].astype(str))

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ–±—É—á–µ–Ω–∞ –º–æ–¥–µ–ª—å
                    if 'model' in st.session_state and st.session_state.model is not None:
                        model = st.session_state['model']
                    if model_id_input in st.session_state.models:
                        model = st.session_state.models[model_id_input]
                    else:
                        st.error("–ú–æ–¥–µ–ª—å –Ω–µ –±—ã–ª–∞ –æ–±—É—á–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
                        st.stop()

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    if isinstance(model, CatBoostClassifier):
                        probability = model.predict_proba(X_predict)[:, 1]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã –¥–ª—è CatBoost
                    else:  # Ridge Classifier
                        probability = model.predict(X_predict)  # –î–ª—è Ridge –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ

                    st.write(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã –¥–ª—è Account ID {account_id_input}: {probability[0]:.2f}")
        else:
            st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å—Ç–æ–ª–±—Ü–∞ 'account_id'.")

elif st.session_state.page == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏":
    st.header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")

    model_id = st.text_input("–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", value="model")

    if st.button("üìñ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"):
        model_info = api_client.get_model_info(model_id)
        if model_info:
            st.write("üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
            st.json(model_info)

            if "feature_importances" in model_info:
                st.write("üìä –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
                feature_importances = model_info["feature_importances"]
                feature_importances_df = pd.DataFrame({
                    "Feature": feature_importances.keys(),
                    "Importance": feature_importances.values()
                }).sort_values(by="Importance", ascending=False)
                st.bar_chart(feature_importances_df.set_index("Feature"))
        else:
            st.error("‚ùå –¢–∞–∫–æ–π –º–æ–¥–µ–ª—å–∫–∏ –Ω–µ—Ç, sorry :(")
