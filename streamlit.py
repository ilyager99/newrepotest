import streamlit as st
import requests
import time
import pandas as pd
import numpy as np
from sklearn.model_selection import KFold
from sklearn.metrics import accuracy_score
from catboost import CatBoostClassifier
from sklearn.linear_model import RidgeClassifier
from sklearn.preprocessing import LabelEncoder

# –∫–ª–∞—Å—Å—ã
class ModelAPI:
    def __init__(self, host: str, port: int):
        self.base_url = f"{host}:{port}/api/v1/models"

    def fit_model(self, params: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏."""
        response = requests.post(f"{self.base_url}/fit", json=params)
        return response.json()

    def get_model_info(self, model_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏."""
        response = requests.get(f"{self.base_url}/info/{model_id}")
        return response.json()

host = "http://****"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Ö–æ—Å—Ç
port = 8000          # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–∞–±–æ—á–∏–π –ø–æ—Ä—Ç
api_client = ModelAPI(host, port)

st.title("–ú–æ–¥–µ–ª—å –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö")

if 'page' not in st.session_state:
    st.session_state.page = "üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"

if 'train_data' not in st.session_state:
    st.session_state.train_data = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

col1, col2, col3 = st.sidebar.columns(3)
with col1:
    if st.button("üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"):
        st.session_state.page = "üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"
with col2:
    if st.button("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"):
        st.session_state.page = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"
with col3:
    if st.button("üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"):
        st.session_state.page = "üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"

if st.session_state.page == "üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏":
    st.header("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")

    type_of_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", ["‚öñÔ∏è Ridge Classifier", "üß† CatBoost Classifier"])
    params = {"type_of_model": type_of_model}

    st.subheader("–ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")
    if type_of_model == "‚öñÔ∏è Ridge Classifier":
        params["alpha"] = st.number_input("Alpha", value=1.0, min_value=0.0)
        params["fit_intercept"] = st.checkbox("Fit Intercept", value=True)

    elif type_of_model == "üß† CatBoost Classifier":
        params["learning_rate"] = st.number_input("Learning Rate", value=0.1, min_value=0.01, max_value=1.0)
        params["depth"] = st.slider("Depth", min_value=1, max_value=16, value=6)
        params["iterations"] = st.number_input("Iterations", value=100, min_value=1)
        params["l2_leaf_reg"] = st.number_input("L2 Leaf Regularization", value=3, min_value=1, max_value=10)

    params["model_id"] = st.text_input("–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª–∏", value="model")
    uploaded_file = st.file_uploader("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (CSV)", type=["csv"])
    
    if uploaded_file is not None:
        data = pd.read_csv(uploaded_file)
        st.session_state.train_data = data  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏–∏
        st.write("–î–∞–Ω–Ω—ã–µ:")
        st.write(data.head())

        target_column = "radiant_win"
        if target_column in data.columns:
            X = data.drop(columns=[target_column])
            y = data[target_column]

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            categorical_cols = X.select_dtypes(include=['object']).columns
            for col in categorical_cols:
                le = LabelEncoder()
                X[col] = le.fit_transform(X[col].astype(str))

            st.subheader(f"–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {target_column}")
            st.write(y.value_counts())

        else:
            st.error(f"–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{target_column}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.")
            st.stop()

        if st.button("üöÄ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
            params["train_data"] = data.to_dict(orient="list")
            start_time = time.time()

            if type_of_model == "‚öñÔ∏è Ridge Classifier":
                model = RidgeClassifier(alpha=params["alpha"], fit_intercept=params["fit_intercept"])
            elif type_of_model == "üß† CatBoost Classifier":
                model = CatBoostClassifier(
                    learning_rate=params["learning_rate"],
                    depth=params["depth"],
                    iterations=params["iterations"],
                    l2_leaf_reg=params["l2_leaf_reg"],
                    verbose=False)

            st.write("–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å")
            kf = KFold(n_splits=5, shuffle=True, random_state=42)
            fold_results = []

            for train_index, test_index in kf.split(X):
                X_train, X_test = X.iloc[train_index], X.iloc[test_index]
                y_train, y_test = y.iloc[train_index], y.iloc[test_index]

                model.fit(X_train, y_train)
                predictions = model.predict(X_test)
                accuracy = accuracy_score(y_test, predictions)
                fold_results.append(accuracy)

            mean_accuracy = np.mean(fold_results)
            std_accuracy = np.std(fold_results)

            end_time = time.time()

            st.success("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞!")
            st.write(f"‚è≥ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∏–ª–æ: {end_time - start_time:.2f} —Å–µ–∫")
            st.write("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            st.write(pd.DataFrame({"Fold": range(1, 6), "Accuracy": fold_results}))
            st.write(f"üèÜ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {mean_accuracy:.4f}")
            st.write(f"üìâ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏: {std_accuracy:.4f}")

            if type_of_model == "üß† CatBoost Classifier":
                feature_importances = model.get_feature_importance()
                feature_importances_df = pd.DataFrame({
                    "Feature": X.columns,
                    "Importance": feature_importances
                }).sort_values(by="Importance", ascending=False)
                st.write("üìà –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
                st.bar_chart(feature_importances_df.set_index("Feature"))

elif st.session_state.page == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏":
    st.header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
    
    model_id = st.text_input("–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", value="model")

    if st.button("üìñ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"):
        model_info = api_client.get_model_info(model_id)
        if model_info:
            st.write("üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
            st.json(model_info)

            if "feature_importances" in model_info:
                st.write("üìä –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
                feature_importances = model_info["feature_importances"]
                feature_importances_df = pd.DataFrame({
                    "Feature": feature_importances.keys(),
                    "Importance": feature_importances.values()
                }).sort_values(by="Importance", ascending=False)
                st.bar_chart(feature_importances_df.set_index("Feature"))
        else:
            st.error("‚ùå –¢–∞–∫–æ–π –º–æ–¥–µ–ª—å–∫–∏ –Ω–µ—Ç, sorry :(")

elif st.session_state.page == "üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è":
    st.header("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

    model_id_selection = st.text_input("–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", value="model")

    if st.session_state.train_data is not None:
        prediction_data = st.session_state.train_data
        st.write("–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–∏–∑ –æ–±—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞):")
        st.write(prediction_data.head())

        if 'account_id' in prediction_data.columns:
            account_ids = prediction_data['account_id'].tolist()
            st.write(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è account_id: {account_ids}")

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            X_pred = prediction_data.drop(columns=['account_id'])
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            categorical_cols = X_pred.select_dtypes(include=['object']).columns
            for col in categorical_cols:
                le = LabelEncoder()
                X_pred[col] = le.fit_transform(X_pred[col].astype(str))

            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
            model_info = api_client.get_model_info(model_id_selection)
            if model_info:
                # –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                if model_info.get('deploy_status') == 'deployed':
                    st.write("üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —á–µ—Ä–µ–∑ API...")
                    response = requests.post(f"{api_client.base_url}/predict/{model_id_selection}", json=X_pred.to_dict(orient='records'))
                    if response.ok:
                        predictions = response.json().get('predictions')
                        if predictions is not None:
                            prediction_results = pd.DataFrame({
                                'account_id': account_ids,
                                'winning_probability': predictions
                            })
                            st.write("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API:")
                            st.write(prediction_results)
                        else:
                            st.error("‚ùå –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.")
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API.")
                else:
                    # –í–∞—Ä–∏–∞–Ω—Ç 2: –õ–æ–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    st.write("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ...")
                    if model_info['type_of_model'] == 'CatBoost Classifier':
                        model = CatBoostClassifier(**model_info['params'])
                        model.load_model(model_id_selection)  # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
                        predictions = model.predict_proba(X_pred)[:, 1]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –∫–ª–∞—Å—Å–∞ 1
                    elif model_info['type_of_model'] == 'Ridge Classifier':
                        model = RidgeClassifier(**model_info['params'])
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ fit –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                        model.fit(X_pred, [0]*len(X_pred))  # –ü–æ—Å–∫–æ–ª—å–∫—É –Ω–µ—Ç y –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ

                        predictions = model.predict_proba(X_pred)[:, 1]

                    if predictions is not None:
                        prediction_results = pd.DataFrame({
                            'account_id': account_ids,
                            'winning_probability': predictions
                        })
                        st.write("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏:")
                        st.write(prediction_results)
            else:
                st.error("‚ùå –ú–æ–¥–µ–ª—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        st.error("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
