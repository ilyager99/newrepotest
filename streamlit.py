import streamlit as st
import requests
import time
import pandas as pd
import numpy as np
from sklearn.model_selection import KFold
from sklearn.metrics import accuracy_score
from catboost import CatBoostClassifier
from sklearn.linear_model import RidgeClassifier
from sklearn.preprocessing import LabelEncoder

class ModelAPI:
    def __init__(self, host: str, port: int):
        self.base_url = f"{host}:{port}/api/v1/models"

    def fit_model(self, params: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏."""
        response = requests.post(f"{self.base_url}/fit", json=params)
        return response.json()

    def get_model_info(self, model_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏."""
        response = requests.get(f"{self.base_url}/info/{model_id}")
        return response.json()

    def get_account_ids(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö account_id –∏–∑ API."""
        response = requests.get(f"{self.base_url}/account_ids")
        if response.status_code == 200:
            return response.json()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ account_id
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Account IDs –∏–∑ API.")
            return []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
host = "http://****"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Ö–æ—Å—Ç
port = 8000          # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–∞–±–æ—á–∏–π –ø–æ—Ä—Ç
api_client = ModelAPI(host, port)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–ú–æ–¥–µ–ª—å –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'page' not in st.session_state:
    st.session_state.page = "üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
st.sidebar.header("–ú–µ–Ω—é –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
if st.sidebar.button("üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"):
    st.session_state.page = "üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"
if st.sidebar.button("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"):
    st.session_state.page = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"
if st.sidebar.button("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"):
    st.session_state.page = "üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–µ–π
if 'uploaded_data' not in st.session_state:
    st.session_state.uploaded_data = None

if 'model' not in st.session_state:
    st.session_state.model = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è
if 'model_id' not in st.session_state:
    st.session_state.model_id = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –º–æ–¥–µ–ª–∏
if 'models' not in st.session_state:
    st.session_state.models = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏ –µ—ë ID –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
def get_ridge_params(params):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Ridge Classifier."""
    params["alpha"] = st.number_input("Alpha", value=1.0, min_value=0.0)
    params["fit_intercept"] = st.checkbox("Fit Intercept", value=True)

def get_catboost_params(params):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ CatBoost Classifier."""
    params["learning_rate"] = st.number_input("Learning Rate", value=0.1, min_value=0.01, max_value=1.0)
    params["depth"] = st.slider("Depth", min_value=1, max_value=16, value=6)
    params["iterations"] = st.number_input("Iterations", value=100, min_value=1)
    params["l2_leaf_reg"] = st.number_input("L2 Leaf Regularization", value=3, min_value=1, max_value=10)

if st.session_state.page == "üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏":
    st.header("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")

    type_of_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", ["‚öñÔ∏è Ridge Classifier", "üß† CatBoost Classifier"])
    params = {"type_of_model": type_of_model}

    st.subheader("–ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")

    # –í—ã–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
    if type_of_model == "‚öñÔ∏è Ridge Classifier":
        get_ridge_params(params)
    elif type_of_model == "üß† CatBoost Classifier":
        get_catboost_params(params)

    params["model_id"] = st.text_input("–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª–∏", value="model")
    uploaded_file = st.file_uploader("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç (CSV)", type=["csv"])

    if uploaded_file is not None:
        data = pd.read_csv(uploaded_file)
        st.session_state.uploaded_data = data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
        st.write("–î–∞–Ω–Ω—ã–µ:")
        st.write(data.head())

        target_column = "radiant_win"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        if target_column not in data.columns:
            st.error(f"–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{target_column}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.")
            st.stop()

        X = data.drop(columns=[target_column])
        y = data[target_column]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        categorical_cols = X.select_dtypes(include=['object']).columns
        for col in categorical_cols:
            le = LabelEncoder()
            X[col] = le.fit_transform(X[col].astype(str))

        st.subheader(f"–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {target_column}")
        st.write(y.value_counts())

        if st.button("üöÄ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
            params["train_data"] = data.to_dict(orient="list")
            start_time = time.time()

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            if type_of_model == "‚öñÔ∏è Ridge Classifier":
                model = RidgeClassifier(alpha=params["alpha"], fit_intercept=params["fit_intercept"])
            elif type_of_model == "üß† CatBoost Classifier":
                model = CatBoostClassifier(
                    learning_rate=params["learning_rate"],
                    depth=params["depth"],
                    iterations=params["iterations"],
                    l2_leaf_reg=params["l2_leaf_reg"],
                    verbose=False)

            st.write("–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å")
            kf = KFold(n_splits=5, shuffle=True, random_state=42)
            fold_results = []

            for train_index, test_index in kf.split(X):
                X_train, X_test = X.iloc[train_index], X.iloc[test_index]
                y_train, y_test = y.iloc[train_index], y.iloc[test_index]

                model.fit(X_train, y_train)
                predictions = model.predict(X_test)
                accuracy = accuracy_score(y_test, predictions)
                fold_results.append(accuracy)

            mean_accuracy = np.mean(fold_results)
            std_accuracy = np.std(fold_results)

            end_time = time.time()

            st.success("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞!")
            st.write(f"‚è≥ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∏–ª–æ: {end_time - start_time:.2f} —Å–µ–∫")
            st.write("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            st.write(pd.DataFrame({"Fold": range(1, 6), "Accuracy": fold_results}))
            st.write(f"üèÜ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {mean_accuracy:.4f}")
            st.write(f"üìâ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏: {std_accuracy:.4f}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –∏ model_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
            st.session_state['model'] = model
            st.session_state.models[params["model_id"]] = model  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –ø–æ–¥ –µ—ë ID
            st.session_state['model_id'] = params["model_id"]

            if type_of_model == "üß† CatBoost Classifier":
                feature_importances = model.get_feature_importance()
                feature_importances_df = pd.DataFrame({
                    "Feature": X.columns,
                    "Importance": feature_importances
                }).sort_values(by="Importance", ascending=False)
                st.write("üìà –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
                st.bar_chart(feature_importances_df.set_index("Feature"))

elif st.session_state.page == "üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è":
    st.header("–ü—Ä–µ–¥—Å–∫–∞–∑–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if st.session_state.uploaded_data is None:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç.")
        st.stop()

    data = st.session_state.uploaded_data
    if 'account_id' not in data.columns:
        st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å—Ç–æ–ª–±—Ü–∞ 'account_id'.")
        st.stop()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ account_id
    source_option = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ Account ID", ["–ò–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞", "–ò–∑ API —Å–µ—Ä–≤–∏—Å–∞"])

    if st.button("–ò–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"):
        source_option = "–ò–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"
    if st.button("–ò–∑ API —Å–µ—Ä–≤–∏—Å–∞"):
        account_ids = api_client.get_account_ids()
        if not account_ids:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ Account IDs –∏–∑ API.")
            st.stop()
        source_option = "–ò–∑ API —Å–µ—Ä–≤–∏—Å–∞"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö account_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    if source_option == "–ò–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞":
        account_ids = data['account_id'].unique()

    # –°–æ–∑–¥–∞–Ω–∏–µ 10 —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ account_id
    selected_account_ids = []
    for i in range(10):
        selected_account_id = st.selectbox(f"–í—ã–±–µ—Ä–∏—Ç–µ Account ID –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è {i + 1}", account_ids)
        selected_account_ids.append(selected_account_id)

    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    model_id_input = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ ID –º–æ–¥–µ–ª–∏", list(st.session_state.models.keys()))

    if st.button("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"):
        for account_id_input in selected_account_ids:
            account_data = data[data['account_id'] == account_id_input]

            if account_data.empty:
                st.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Account ID {account_id_input}.")
                continue

            X_predict = account_data.drop(columns=['radiant_win'])  # –£–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            categorical_cols = X_predict.select_dtypes(include=['object']).columns
            for col in categorical_cols:
                le = LabelEncoder()
                X_predict[col] = le.fit_transform(X_predict[col].astype(str))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ–±—É—á–µ–Ω–∞ –º–æ–¥–µ–ª—å
            if model_id_input not in st.session_state.models:
                st.error("–ú–æ–¥–µ–ª—å –Ω–µ –±—ã–ª–∞ –æ–±—É—á–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
                st.stop()

            model = st.session_state.models[model_id_input]

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            if isinstance(model, CatBoostClassifier):
                probability = model.predict_proba(X_predict)[:, 1]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã –¥–ª—è CatBoost
            else:  # Ridge Classifier
                probability = model.predict(X_predict)  # –î–ª—è Ridge –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ

            st.write(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã –¥–ª—è Account ID {account_id_input}: {probability[0]:.2f}")

elif st.session_state.page == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏":
    st.header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")

    model_id = st.text_input("–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", value="model")

    if st.button("üìñ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"):
        model_info = api_client.get_model_info(model_id)
        if model_info:
            st.write("üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
            st.json(model_info)

            if "feature_importances" in model_info:
                st.write("üìä –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
                feature_importances = model_info["feature_importances"]
                feature_importances_df = pd.DataFrame({
                    "Feature": feature_importances.keys(),
                    "Importance": feature_importances.values()
                }).sort_values(by="Importance", ascending=False)
                st.bar_chart(feature_importances_df.set_index("Feature"))
        else:
            st.error("‚ùå –¢–∞–∫–æ–π –º–æ–¥–µ–ª—å–∫–∏ –Ω–µ—Ç, sorry :(")
